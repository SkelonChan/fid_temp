// Generated by gencpp from file msg_in_arduino2base/Encoder.msg
// DO NOT EDIT!


#ifndef MSG_IN_ARDUINO2BASE_MESSAGE_ENCODER_H
#define MSG_IN_ARDUINO2BASE_MESSAGE_ENCODER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msg_in_arduino2base
{
template <class ContainerAllocator>
struct Encoder_
{
  typedef Encoder_<ContainerAllocator> Type;

  Encoder_()
    : stamp()
    , vel(0.0)
    , acc(0.0)
    , odom(0.0)  {
    }
  Encoder_(const ContainerAllocator& _alloc)
    : stamp()
    , vel(0.0)
    , acc(0.0)
    , odom(0.0)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef double _vel_type;
  _vel_type vel;

   typedef double _acc_type;
  _acc_type acc;

   typedef double _odom_type;
  _odom_type odom;





  typedef boost::shared_ptr< ::msg_in_arduino2base::Encoder_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_in_arduino2base::Encoder_<ContainerAllocator> const> ConstPtr;

}; // struct Encoder_

typedef ::msg_in_arduino2base::Encoder_<std::allocator<void> > Encoder;

typedef boost::shared_ptr< ::msg_in_arduino2base::Encoder > EncoderPtr;
typedef boost::shared_ptr< ::msg_in_arduino2base::Encoder const> EncoderConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_in_arduino2base::Encoder_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_in_arduino2base::Encoder_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msg_in_arduino2base::Encoder_<ContainerAllocator1> & lhs, const ::msg_in_arduino2base::Encoder_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.vel == rhs.vel &&
    lhs.acc == rhs.acc &&
    lhs.odom == rhs.odom;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msg_in_arduino2base::Encoder_<ContainerAllocator1> & lhs, const ::msg_in_arduino2base::Encoder_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msg_in_arduino2base

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::msg_in_arduino2base::Encoder_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_in_arduino2base::Encoder_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_in_arduino2base::Encoder_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_in_arduino2base::Encoder_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_in_arduino2base::Encoder_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_in_arduino2base::Encoder_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_in_arduino2base::Encoder_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1a49ef134967517c6b75c87daa9d21e8";
  }

  static const char* value(const ::msg_in_arduino2base::Encoder_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1a49ef134967517cULL;
  static const uint64_t static_value2 = 0x6b75c87daa9d21e8ULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_in_arduino2base::Encoder_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_in_arduino2base/Encoder";
  }

  static const char* value(const ::msg_in_arduino2base::Encoder_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_in_arduino2base::Encoder_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 此消息包含用于从编码器传出的消息格式\n"
"# 时间戳 stamp\n"
"# 速度值 vel\n"
"# 加速度 acc\n"
"\n"
"time stamp\n"
"\n"
"float64 vel\n"
"float64 acc\n"
"float64 odom\n"
;
  }

  static const char* value(const ::msg_in_arduino2base::Encoder_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_in_arduino2base::Encoder_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.vel);
      stream.next(m.acc);
      stream.next(m.odom);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Encoder_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_in_arduino2base::Encoder_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_in_arduino2base::Encoder_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "vel: ";
    Printer<double>::stream(s, indent + "  ", v.vel);
    s << indent << "acc: ";
    Printer<double>::stream(s, indent + "  ", v.acc);
    s << indent << "odom: ";
    Printer<double>::stream(s, indent + "  ", v.odom);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_IN_ARDUINO2BASE_MESSAGE_ENCODER_H
