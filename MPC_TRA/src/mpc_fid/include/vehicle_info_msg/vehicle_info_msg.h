// Generated by gencpp from file vehicle_info_msg/vehicle_info_msg.msg
// DO NOT EDIT!


#ifndef VEHICLE_INFO_MSG_MESSAGE_VEHICLE_INFO_MSG_H
#define VEHICLE_INFO_MSG_MESSAGE_VEHICLE_INFO_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vehicle_info_msg
{
template <class ContainerAllocator>
struct vehicle_info_msg_
{
  typedef vehicle_info_msg_<ContainerAllocator> Type;

  vehicle_info_msg_()
    : y_dot(0.0)
    , x_dot(0.0)
    , phi(0.0)
    , phi_dot(0.0)
    , x_pos(0.0)
    , y_pos(0.0)  {
    }
  vehicle_info_msg_(const ContainerAllocator& _alloc)
    : y_dot(0.0)
    , x_dot(0.0)
    , phi(0.0)
    , phi_dot(0.0)
    , x_pos(0.0)
    , y_pos(0.0)  {
  (void)_alloc;
    }



   typedef double _y_dot_type;
  _y_dot_type y_dot;

   typedef double _x_dot_type;
  _x_dot_type x_dot;

   typedef double _phi_type;
  _phi_type phi;

   typedef double _phi_dot_type;
  _phi_dot_type phi_dot;

   typedef double _x_pos_type;
  _x_pos_type x_pos;

   typedef double _y_pos_type;
  _y_pos_type y_pos;





  typedef boost::shared_ptr< ::vehicle_info_msg::vehicle_info_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vehicle_info_msg::vehicle_info_msg_<ContainerAllocator> const> ConstPtr;

}; // struct vehicle_info_msg_

typedef ::vehicle_info_msg::vehicle_info_msg_<std::allocator<void> > vehicle_info_msg;

typedef boost::shared_ptr< ::vehicle_info_msg::vehicle_info_msg > vehicle_info_msgPtr;
typedef boost::shared_ptr< ::vehicle_info_msg::vehicle_info_msg const> vehicle_info_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vehicle_info_msg::vehicle_info_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vehicle_info_msg::vehicle_info_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vehicle_info_msg::vehicle_info_msg_<ContainerAllocator1> & lhs, const ::vehicle_info_msg::vehicle_info_msg_<ContainerAllocator2> & rhs)
{
  return lhs.y_dot == rhs.y_dot &&
    lhs.x_dot == rhs.x_dot &&
    lhs.phi == rhs.phi &&
    lhs.phi_dot == rhs.phi_dot &&
    lhs.x_pos == rhs.x_pos &&
    lhs.y_pos == rhs.y_pos;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vehicle_info_msg::vehicle_info_msg_<ContainerAllocator1> & lhs, const ::vehicle_info_msg::vehicle_info_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vehicle_info_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::vehicle_info_msg::vehicle_info_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_info_msg::vehicle_info_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_info_msg::vehicle_info_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_info_msg::vehicle_info_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_info_msg::vehicle_info_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_info_msg::vehicle_info_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vehicle_info_msg::vehicle_info_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "980763ea5ba4cb1d7f6607e22cbbfd46";
  }

  static const char* value(const ::vehicle_info_msg::vehicle_info_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x980763ea5ba4cb1dULL;
  static const uint64_t static_value2 = 0x7f6607e22cbbfd46ULL;
};

template<class ContainerAllocator>
struct DataType< ::vehicle_info_msg::vehicle_info_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vehicle_info_msg/vehicle_info_msg";
  }

  static const char* value(const ::vehicle_info_msg::vehicle_info_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vehicle_info_msg::vehicle_info_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 y_dot\n"
"float64 x_dot\n"
"float64 phi\n"
"float64 phi_dot\n"
"float64 x_pos\n"
"float64 y_pos\n"
;
  }

  static const char* value(const ::vehicle_info_msg::vehicle_info_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vehicle_info_msg::vehicle_info_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.y_dot);
      stream.next(m.x_dot);
      stream.next(m.phi);
      stream.next(m.phi_dot);
      stream.next(m.x_pos);
      stream.next(m.y_pos);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct vehicle_info_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vehicle_info_msg::vehicle_info_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vehicle_info_msg::vehicle_info_msg_<ContainerAllocator>& v)
  {
    s << indent << "y_dot: ";
    Printer<double>::stream(s, indent + "  ", v.y_dot);
    s << indent << "x_dot: ";
    Printer<double>::stream(s, indent + "  ", v.x_dot);
    s << indent << "phi: ";
    Printer<double>::stream(s, indent + "  ", v.phi);
    s << indent << "phi_dot: ";
    Printer<double>::stream(s, indent + "  ", v.phi_dot);
    s << indent << "x_pos: ";
    Printer<double>::stream(s, indent + "  ", v.x_pos);
    s << indent << "y_pos: ";
    Printer<double>::stream(s, indent + "  ", v.y_pos);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VEHICLE_INFO_MSG_MESSAGE_VEHICLE_INFO_MSG_H
