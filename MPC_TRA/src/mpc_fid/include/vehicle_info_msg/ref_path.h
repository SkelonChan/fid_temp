// Generated by gencpp from file vehicle_info_msg/ref_path.msg
// DO NOT EDIT!


#ifndef VEHICLE_INFO_MSG_MESSAGE_REF_PATH_H
#define VEHICLE_INFO_MSG_MESSAGE_REF_PATH_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vehicle_info_msg
{
template <class ContainerAllocator>
struct ref_path_
{
  typedef ref_path_<ContainerAllocator> Type;

  ref_path_()
    : x_ref(0.0)
    , y_ref(0.0)
    , phi_ref(0.0)
    , vx_ref(0.0)
    , kappa_ref(0.0)
    , phi_rate_ref(0.0)
    , vy_ref(0.0)  {
    }
  ref_path_(const ContainerAllocator& _alloc)
    : x_ref(0.0)
    , y_ref(0.0)
    , phi_ref(0.0)
    , vx_ref(0.0)
    , kappa_ref(0.0)
    , phi_rate_ref(0.0)
    , vy_ref(0.0)  {
  (void)_alloc;
    }



   typedef double _x_ref_type;
  _x_ref_type x_ref;

   typedef double _y_ref_type;
  _y_ref_type y_ref;

   typedef double _phi_ref_type;
  _phi_ref_type phi_ref;

   typedef double _vx_ref_type;
  _vx_ref_type vx_ref;

   typedef double _kappa_ref_type;
  _kappa_ref_type kappa_ref;

   typedef double _phi_rate_ref_type;
  _phi_rate_ref_type phi_rate_ref;

   typedef double _vy_ref_type;
  _vy_ref_type vy_ref;





  typedef boost::shared_ptr< ::vehicle_info_msg::ref_path_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vehicle_info_msg::ref_path_<ContainerAllocator> const> ConstPtr;

}; // struct ref_path_

typedef ::vehicle_info_msg::ref_path_<std::allocator<void> > ref_path;

typedef boost::shared_ptr< ::vehicle_info_msg::ref_path > ref_pathPtr;
typedef boost::shared_ptr< ::vehicle_info_msg::ref_path const> ref_pathConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vehicle_info_msg::ref_path_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vehicle_info_msg::ref_path_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vehicle_info_msg::ref_path_<ContainerAllocator1> & lhs, const ::vehicle_info_msg::ref_path_<ContainerAllocator2> & rhs)
{
  return lhs.x_ref == rhs.x_ref &&
    lhs.y_ref == rhs.y_ref &&
    lhs.phi_ref == rhs.phi_ref &&
    lhs.vx_ref == rhs.vx_ref &&
    lhs.kappa_ref == rhs.kappa_ref &&
    lhs.phi_rate_ref == rhs.phi_rate_ref &&
    lhs.vy_ref == rhs.vy_ref;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vehicle_info_msg::ref_path_<ContainerAllocator1> & lhs, const ::vehicle_info_msg::ref_path_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vehicle_info_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::vehicle_info_msg::ref_path_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_info_msg::ref_path_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_info_msg::ref_path_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_info_msg::ref_path_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_info_msg::ref_path_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_info_msg::ref_path_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vehicle_info_msg::ref_path_<ContainerAllocator> >
{
  static const char* value()
  {
    return "47f8797d01949fc1802e2afa4cb7b808";
  }

  static const char* value(const ::vehicle_info_msg::ref_path_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x47f8797d01949fc1ULL;
  static const uint64_t static_value2 = 0x802e2afa4cb7b808ULL;
};

template<class ContainerAllocator>
struct DataType< ::vehicle_info_msg::ref_path_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vehicle_info_msg/ref_path";
  }

  static const char* value(const ::vehicle_info_msg::ref_path_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vehicle_info_msg::ref_path_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x_ref\n"
"float64 y_ref\n"
"float64 phi_ref\n"
"float64 vx_ref\n"
"float64 kappa_ref\n"
"float64 phi_rate_ref\n"
"float64 vy_ref\n"
;
  }

  static const char* value(const ::vehicle_info_msg::ref_path_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vehicle_info_msg::ref_path_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x_ref);
      stream.next(m.y_ref);
      stream.next(m.phi_ref);
      stream.next(m.vx_ref);
      stream.next(m.kappa_ref);
      stream.next(m.phi_rate_ref);
      stream.next(m.vy_ref);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ref_path_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vehicle_info_msg::ref_path_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vehicle_info_msg::ref_path_<ContainerAllocator>& v)
  {
    s << indent << "x_ref: ";
    Printer<double>::stream(s, indent + "  ", v.x_ref);
    s << indent << "y_ref: ";
    Printer<double>::stream(s, indent + "  ", v.y_ref);
    s << indent << "phi_ref: ";
    Printer<double>::stream(s, indent + "  ", v.phi_ref);
    s << indent << "vx_ref: ";
    Printer<double>::stream(s, indent + "  ", v.vx_ref);
    s << indent << "kappa_ref: ";
    Printer<double>::stream(s, indent + "  ", v.kappa_ref);
    s << indent << "phi_rate_ref: ";
    Printer<double>::stream(s, indent + "  ", v.phi_rate_ref);
    s << indent << "vy_ref: ";
    Printer<double>::stream(s, indent + "  ", v.vy_ref);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VEHICLE_INFO_MSG_MESSAGE_REF_PATH_H
