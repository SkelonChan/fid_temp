// Generated by gencpp from file router2ros/router2ros.msg
// DO NOT EDIT!


#ifndef ROUTER2ROS_MESSAGE_ROUTER2ROS_H
#define ROUTER2ROS_MESSAGE_ROUTER2ROS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace router2ros
{
template <class ContainerAllocator>
struct router2ros_
{
  typedef router2ros_<ContainerAllocator> Type;

  router2ros_()
    : motor_value(0)
    , servo_value(0)  {
    }
  router2ros_(const ContainerAllocator& _alloc)
    : motor_value(0)
    , servo_value(0)  {
  (void)_alloc;
    }



   typedef int16_t _motor_value_type;
  _motor_value_type motor_value;

   typedef int16_t _servo_value_type;
  _servo_value_type servo_value;





  typedef boost::shared_ptr< ::router2ros::router2ros_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::router2ros::router2ros_<ContainerAllocator> const> ConstPtr;

}; // struct router2ros_

typedef ::router2ros::router2ros_<std::allocator<void> > router2ros;

typedef boost::shared_ptr< ::router2ros::router2ros > router2rosPtr;
typedef boost::shared_ptr< ::router2ros::router2ros const> router2rosConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::router2ros::router2ros_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::router2ros::router2ros_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::router2ros::router2ros_<ContainerAllocator1> & lhs, const ::router2ros::router2ros_<ContainerAllocator2> & rhs)
{
  return lhs.motor_value == rhs.motor_value &&
    lhs.servo_value == rhs.servo_value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::router2ros::router2ros_<ContainerAllocator1> & lhs, const ::router2ros::router2ros_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace router2ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::router2ros::router2ros_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::router2ros::router2ros_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::router2ros::router2ros_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::router2ros::router2ros_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::router2ros::router2ros_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::router2ros::router2ros_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::router2ros::router2ros_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c59bb685b25a0a34e81a1a8a097b9eae";
  }

  static const char* value(const ::router2ros::router2ros_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc59bb685b25a0a34ULL;
  static const uint64_t static_value2 = 0xe81a1a8a097b9eaeULL;
};

template<class ContainerAllocator>
struct DataType< ::router2ros::router2ros_<ContainerAllocator> >
{
  static const char* value()
  {
    return "router2ros/router2ros";
  }

  static const char* value(const ::router2ros::router2ros_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::router2ros::router2ros_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 motor_value\n"
"int16 servo_value\n"
;
  }

  static const char* value(const ::router2ros::router2ros_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::router2ros::router2ros_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.motor_value);
      stream.next(m.servo_value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct router2ros_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::router2ros::router2ros_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::router2ros::router2ros_<ContainerAllocator>& v)
  {
    s << indent << "motor_value: ";
    Printer<int16_t>::stream(s, indent + "  ", v.motor_value);
    s << indent << "servo_value: ";
    Printer<int16_t>::stream(s, indent + "  ", v.servo_value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROUTER2ROS_MESSAGE_ROUTER2ROS_H
